/**
 * LR parser generated by the Syntax tool.
 *
 * https://www.npmjs.com/package/syntax-cli
 *
 *   npm install -g syntax-cli
 *
 *   syntax-cli --help
 *
 * To regenerate run:
 *
 *   syntax-cli \
 *     --grammar ~/path-to-grammar-file \
 *     --mode <parsing-mode> \
 *     --output ~/path-to-output-parser-file.js
 */

'use strict';

/**
 * Matched token text.
 */
let yytext;

/**
 * Length of the matched token text.
 */
let yyleng;

/**
 * Storage object.
 */
let yy = {};

/**
 * Result of semantic action.
 */
let __;

/**
 * Result location object.
 */
let __loc;

function yyloc(start, end) {
  if (!yy.options.captureLocations) {
    return null;
  }

  // Epsilon doesn't produce location.
  if (!start || !end) {
    return start || end;
  }

  return {
    startOffset: start.startOffset,
    endOffset: end.endOffset,
    startLine: start.startLine,
    endLine: end.endLine,
    startColumn: start.startColumn,
    endColumn: end.endColumn,
  };
}

const EOF = '$';

/**
 * List of productions (generated by Syntax tool).
 */
const productions = [[-1,1,(_1) => { __ = _1 }],
[0,1,(_1) => { 
      __ = {
        type: 'Program',
        body: _1,
      }
     }],
[1,1,(_1) => {  __ = [_1]  }],
[1,2,(_1,_2) => {  _1.push(_2); __ = _1  }],
[2,1,(_1) => { __ = _1 }],
[2,1,(_1) => { __ = _1 }],
[2,1,(_1) => { __ = _1 }],
[2,1,(_1) => { __ = _1 }],
[2,1,(_1) => { __ = _1 }],
[2,1,(_1) => { __ = _1 }],
[2,1,(_1) => { __ = _1 }],
[2,1,(_1) => { __ = _1 }],
[2,1,(_1) => { __ = _1 }],
[3,4,(_1,_2,_3,_4) => { 
      __ = {
        type: 'ClassDeclaration',
        id: _2,
        superClass: _3,
        body: _4,
      }
     }],
[4,1,(_1) => { __ = _1 }],
[4,0,() => {  __ = null  }],
[5,2,(_1,_2) => {  __ = _2  }],
[6,1,(_1) => { __ = _1 }],
[7,5,(_1,_2,_3,_4,_5) => { 
      __ = {
        type: 'WhileStatement',
        test: _3,
        body: _5,
      }
     }],
[8,3,(_1,_2,_3) => { 
      __ = {
        type: 'VariableStatement',
        declarations: _2,
      }
     }],
[9,1,(_1) => {  __ = [_1]  }],
[9,3,(_1,_2,_3) => {  _1.push(_3); __ = _1  }],
[10,2,(_1,_2) => { 
      __ = {
        type: 'VariableDeclaration',
        id: _1,
        init: _2,
      }
     }],
[11,1,(_1) => { __ = _1 }],
[11,0,() => {  __ = null  }],
[12,2,(_1,_2) => {  __ = _2  }],
[13,5,(_1,_2,_3,_4,_5) => {  __ = IfStatement(_3, _5)  }],
[13,7,(_1,_2,_3,_4,_5,_6,_7) => {  __ = IfStatement(_3, _5, _7)  }],
[14,6,(_1,_2,_3,_4,_5,_6) => { 
      __ = {
        type: 'FunctionDeclaration',
        name: _2,
        params: _4,
        body: _6,
      }
     }],
[15,1,(_1) => { 
      __ = {
        type: 'Identifier',
        value: _1,
      }
     }],
[16,1,(_1) => { __ = _1 }],
[16,0,() => {  __ = []  }],
[17,1,(_1) => {  __ = [_1]  }],
[17,3,(_1,_2,_3) => {  _1.push(_3); __ = _1  }],
[18,3,(_1,_2,_3) => { 
      __ = {
        type: 'ReturnStatement',
        argument: _2,
      }
     }],
[19,1,(_1) => { __ = _1 }],
[19,0,() => {  __ = null  }],
[20,2,(_1,_2) => { 
      __ = {
        type: 'ExpressionStatement',
        expression: _1,
      }
     }],
[21,1,(_1) => { 
      __ = {
        type: 'EmptyStatement',
      }
     }],
[22,3,(_1,_2,_3) => { 
      __ = {
        type: 'BlockStatement',
        body: _2,
      }
     }],
[23,1,(_1) => { __ = _1 }],
[23,0,() => {  __ = []  }],
[24,1,(_1) => { __ = _1 }],
[25,1,(_1) => { __ = _1 }],
[25,3,(_1,_2,_3) => { 
      __ = {
        type: 'AssignmentExpression',
        left: _1,
        operator: _2,
        right: _3,
      }
     }],
[26,1,(_1) => { __ = _1 }],
[27,1,(_1) => { __ = _1 }],
[27,1,(_1) => { __ = _1 }],
[27,3,(_1,_2,_3) => {  __ = MemberExpression(_1, _3)  }],
[27,4,(_1,_2,_3,_4) => {  __ = MemberExpression(_1, _3)  }],
[28,1,(_1) => { 
      __ = {
        type: 'ThisExpression',
      }
     }],
[29,1,(_1) => { __ = _1 }],
[29,1,(_1) => { __ = _1 }],
[30,1,(_1) => { __ = _1 }],
[30,3,(_1,_2,_3) => {  __ = LogicalExpression(_1, _2, _3)  }],
[31,1,(_1) => { __ = _1 }],
[31,3,(_1,_2,_3) => {  __ = LogicalExpression(_1, _2, _3)  }],
[32,1,(_1) => { __ = _1 }],
[32,3,(_1,_2,_3) => {  __ = BinaryExpression(_1, _2, _3)  }],
[33,1,(_1) => { __ = _1 }],
[33,3,(_1,_2,_3) => {  __ = BinaryExpression(_1, _2, _3)  }],
[34,3,(_1,_2,_3) => {  __ = BinaryExpression(_1, _2, _3)  }],
[34,1,(_1) => { __ = _1 }],
[35,3,(_1,_2,_3) => {  __ = BinaryExpression(_1, _2, _3)  }],
[35,1,(_1) => { __ = _1 }],
[36,1,(_1) => { __ = _1 }],
[36,1,(_1) => { __ = _1 }],
[36,2,(_1,_2) => {  __ = UnaryExpression(_1, _2)  }],
[37,2,(_1,_2) => {  __ = CallExpression(_1, _2)  }],
[37,2,(_1,_2) => {  __ = CallExpression(_1, _2)  }],
[38,1,(_1) => { 
      __ = {
        type: 'Super',
      }
     }],
[39,1,(_1) => { __ = _1 }],
[39,1,(_1) => { __ = _1 }],
[40,3,(_1,_2,_3) => {  __ = _2  }],
[41,1,(_1) => { __ = _1 }],
[41,0,() => {  __ = []  }],
[42,1,(_1) => {  __ = [_1]  }],
[42,3,(_1,_2,_3) => {  _1.push(_3); __ = _1  }],
[43,1,(_1) => { __ = _1 }],
[43,1,(_1) => { __ = _1 }],
[43,1,(_1) => { __ = _1 }],
[43,1,(_1) => { __ = _1 }],
[44,3,(_1,_2,_3) => { 
      __ = {
        type: 'NewExpression',
        callee: _2,
        arguments: _3,
      }
     }],
[45,1,(_1) => { __ = _1 }],
[45,1,(_1) => { __ = _1 }],
[45,1,(_1) => { __ = _1 }],
[45,1,(_1) => { __ = _1 }],
[45,1,(_1) => { __ = _1 }],
[46,1,(_1) => {  __ = Literal('Boolean', true)  }],
[47,1,(_1) => {  __ = Literal('Boolean', false)  }],
[48,1,(_1) => {  __ = Literal('Null', null)  }],
[49,1,(_1) => {  __ = Literal('Numeric', Number(_1))  }],
[50,1,(_1) => {  __ = Literal('String', _1.slice(1, -1))  }],
[51,3,(_1,_2,_3) => {  __ = _2  }]];

/**
 * Encoded tokens map.
 */
const tokens = {"CLASS":"52","EXTENDS":"53","WHILE":"54","LET":"55","SIMPLE_ASSIGN":"56","IF":"57","ELSE":"58","DEF":"59","IDENTIFIER":"60","RETURN":"61","THIS":"62","COMPLEX_ASSIGN":"63","LOGICAL_OR":"64","LOGICAL_AND":"65","EQUALITY_OPERATOR":"66","RELATIONAL_OPERATOR":"67","ADDITIVE_OPERATOR":"68","MULTIPLICATIVE_OPERATOR":"69","SUPER":"70","NEW":"71","TRUE":"72","FALSE":"73","NULL":"74","NUMBER":"75","STRING":"76","'('":"77","')'":"78","';'":"79","','":"80","'{'":"81","'}'":"82","'.'":"83","'['":"84","']'":"85","$":"86"};

/**
 * Parsing table (generated by Syntax tool).
 */
const table = [{"0":1,"1":2,"2":3,"3":12,"6":11,"7":55,"8":10,"13":9,"14":7,"15":41,"18":8,"20":4,"21":5,"22":6,"24":13,"25":14,"26":16,"27":40,"28":42,"30":15,"31":17,"32":18,"33":19,"34":20,"35":21,"36":22,"37":24,"38":47,"39":46,"43":23,"44":27,"45":26,"46":31,"47":32,"48":33,"49":29,"50":30,"51":28,"52":"s57","54":"s56","55":"s54","57":"s53","59":"s51","60":"s43","61":"s52","62":"s44","68":"s25","70":"s48","71":"s39","72":"s36","73":"s37","74":"s38","75":"s34","76":"s35","77":"s45","79":"s49","81":"s50"},{"86":"acc"},{"2":58,"3":12,"6":11,"7":55,"8":10,"13":9,"14":7,"15":41,"18":8,"20":4,"21":5,"22":6,"24":13,"25":14,"26":16,"27":40,"28":42,"30":15,"31":17,"32":18,"33":19,"34":20,"35":21,"36":22,"37":24,"38":47,"39":46,"43":23,"44":27,"45":26,"46":31,"47":32,"48":33,"49":29,"50":30,"51":28,"52":"s57","54":"s56","55":"s54","57":"s53","59":"s51","60":"s43","61":"s52","62":"s44","68":"s25","70":"s48","71":"s39","72":"s36","73":"s37","74":"s38","75":"s34","76":"s35","77":"s45","79":"s49","81":"s50","86":"r1"},{"52":"r2","54":"r2","55":"r2","57":"r2","59":"r2","60":"r2","61":"r2","62":"r2","68":"r2","70":"r2","71":"r2","72":"r2","73":"r2","74":"r2","75":"r2","76":"r2","77":"r2","79":"r2","81":"r2","82":"r2","86":"r2"},{"52":"r4","54":"r4","55":"r4","57":"r4","58":"r4","59":"r4","60":"r4","61":"r4","62":"r4","68":"r4","70":"r4","71":"r4","72":"r4","73":"r4","74":"r4","75":"r4","76":"r4","77":"r4","79":"r4","81":"r4","82":"r4","86":"r4"},{"52":"r5","54":"r5","55":"r5","57":"r5","58":"r5","59":"r5","60":"r5","61":"r5","62":"r5","68":"r5","70":"r5","71":"r5","72":"r5","73":"r5","74":"r5","75":"r5","76":"r5","77":"r5","79":"r5","81":"r5","82":"r5","86":"r5"},{"52":"r6","54":"r6","55":"r6","57":"r6","58":"r6","59":"r6","60":"r6","61":"r6","62":"r6","68":"r6","70":"r6","71":"r6","72":"r6","73":"r6","74":"r6","75":"r6","76":"r6","77":"r6","79":"r6","81":"r6","82":"r6","86":"r6"},{"52":"r7","54":"r7","55":"r7","57":"r7","58":"r7","59":"r7","60":"r7","61":"r7","62":"r7","68":"r7","70":"r7","71":"r7","72":"r7","73":"r7","74":"r7","75":"r7","76":"r7","77":"r7","79":"r7","81":"r7","82":"r7","86":"r7"},{"52":"r8","54":"r8","55":"r8","57":"r8","58":"r8","59":"r8","60":"r8","61":"r8","62":"r8","68":"r8","70":"r8","71":"r8","72":"r8","73":"r8","74":"r8","75":"r8","76":"r8","77":"r8","79":"r8","81":"r8","82":"r8","86":"r8"},{"52":"r9","54":"r9","55":"r9","57":"r9","58":"r9","59":"r9","60":"r9","61":"r9","62":"r9","68":"r9","70":"r9","71":"r9","72":"r9","73":"r9","74":"r9","75":"r9","76":"r9","77":"r9","79":"r9","81":"r9","82":"r9","86":"r9"},{"52":"r10","54":"r10","55":"r10","57":"r10","58":"r10","59":"r10","60":"r10","61":"r10","62":"r10","68":"r10","70":"r10","71":"r10","72":"r10","73":"r10","74":"r10","75":"r10","76":"r10","77":"r10","79":"r10","81":"r10","82":"r10","86":"r10"},{"52":"r11","54":"r11","55":"r11","57":"r11","58":"r11","59":"r11","60":"r11","61":"r11","62":"r11","68":"r11","70":"r11","71":"r11","72":"r11","73":"r11","74":"r11","75":"r11","76":"r11","77":"r11","79":"r11","81":"r11","82":"r11","86":"r11"},{"52":"r12","54":"r12","55":"r12","57":"r12","58":"r12","59":"r12","60":"r12","61":"r12","62":"r12","68":"r12","70":"r12","71":"r12","72":"r12","73":"r12","74":"r12","75":"r12","76":"r12","77":"r12","79":"r12","81":"r12","82":"r12","86":"r12"},{"79":"s59"},{"78":"r42","79":"r42","85":"r42"},{"64":"s60","78":"r43","79":"r43","80":"r43","85":"r43"},{"29":82,"56":"s83","63":"s84","64":"r80","65":"r80","66":"r80","67":"r80","68":"r80","69":"r80","77":"r71","78":"r80","79":"r80","80":"r80","85":"r80"},{"64":"r53","65":"s63","78":"r53","79":"r53","80":"r53","85":"r53"},{"64":"r55","65":"r55","66":"s65","78":"r55","79":"r55","80":"r55","85":"r55"},{"64":"r57","65":"r57","66":"r57","67":"s67","78":"r57","79":"r57","80":"r57","85":"r57"},{"64":"r59","65":"r59","66":"r59","67":"r59","68":"s69","78":"r59","79":"r59","80":"r59","85":"r59"},{"64":"r62","65":"r62","66":"r62","67":"r62","68":"r62","69":"s71","78":"r62","79":"r62","80":"r62","85":"r62"},{"64":"r64","65":"r64","66":"r64","67":"r64","68":"r64","69":"r64","78":"r64","79":"r64","80":"r64","85":"r64"},{"64":"r65","65":"r65","66":"r65","67":"r65","68":"r65","69":"r65","78":"r65","79":"r65","80":"r65","85":"r65"},{"64":"r66","65":"r66","66":"r66","67":"r66","68":"r66","69":"r66","77":"r72","78":"r66","79":"r66","80":"r66","85":"r66"},{"15":41,"26":62,"27":40,"28":42,"36":73,"37":24,"38":47,"39":46,"43":23,"44":27,"45":26,"46":31,"47":32,"48":33,"49":29,"50":30,"51":28,"60":"s43","62":"s44","68":"s25","70":"s48","71":"s39","72":"s36","73":"s37","74":"s38","75":"s34","76":"s35","77":"s45"},{"64":"r78","65":"r78","66":"r78","67":"r78","68":"r78","69":"r78","78":"r78","79":"r78","80":"r78","85":"r78"},{"64":"r79","65":"r79","66":"r79","67":"r79","68":"r79","69":"r79","78":"r79","79":"r79","80":"r79","85":"r79"},{"64":"r81","65":"r81","66":"r81","67":"r81","68":"r81","69":"r81","78":"r81","79":"r81","80":"r81","85":"r81"},{"64":"r83","65":"r83","66":"r83","67":"r83","68":"r83","69":"r83","78":"r83","79":"r83","80":"r83","85":"r83"},{"64":"r84","65":"r84","66":"r84","67":"r84","68":"r84","69":"r84","78":"r84","79":"r84","80":"r84","85":"r84"},{"64":"r85","65":"r85","66":"r85","67":"r85","68":"r85","69":"r85","78":"r85","79":"r85","80":"r85","85":"r85"},{"64":"r86","65":"r86","66":"r86","67":"r86","68":"r86","69":"r86","78":"r86","79":"r86","80":"r86","85":"r86"},{"64":"r87","65":"r87","66":"r87","67":"r87","68":"r87","69":"r87","78":"r87","79":"r87","80":"r87","85":"r87"},{"64":"r91","65":"r91","66":"r91","67":"r91","68":"r91","69":"r91","78":"r91","79":"r91","80":"r91","85":"r91"},{"64":"r92","65":"r92","66":"r92","67":"r92","68":"r92","69":"r92","78":"r92","79":"r92","80":"r92","85":"r92"},{"64":"r88","65":"r88","66":"r88","67":"r88","68":"r88","69":"r88","78":"r88","79":"r88","80":"r88","85":"r88"},{"64":"r89","65":"r89","66":"r89","67":"r89","68":"r89","69":"r89","78":"r89","79":"r89","80":"r89","85":"r89"},{"64":"r90","65":"r90","66":"r90","67":"r90","68":"r90","69":"r90","78":"r90","79":"r90","80":"r90","85":"r90"},{"15":41,"27":74,"28":42,"60":"s43","62":"s44"},{"56":"r45","63":"r45","64":"r45","65":"r45","66":"r45","67":"r45","68":"r45","69":"r45","77":"r45","78":"r45","79":"r45","80":"r45","83":"s76","84":"s77","85":"r45"},{"56":"r46","63":"r46","64":"r46","65":"r46","66":"r46","67":"r46","68":"r46","69":"r46","77":"r46","78":"r46","79":"r46","80":"r46","83":"r46","84":"r46","85":"r46"},{"56":"r47","63":"r47","64":"r47","65":"r47","66":"r47","67":"r47","68":"r47","69":"r47","77":"r47","78":"r47","79":"r47","80":"r47","83":"r47","84":"r47","85":"r47"},{"52":"r29","53":"r29","54":"r29","55":"r29","56":"r29","57":"r29","59":"r29","60":"r29","61":"r29","62":"r29","63":"r29","64":"r29","65":"r29","66":"r29","67":"r29","68":"r29","69":"r29","70":"r29","71":"r29","72":"r29","73":"r29","74":"r29","75":"r29","76":"r29","77":"r29","78":"r29","79":"r29","80":"r29","81":"r29","83":"r29","84":"r29","85":"r29"},{"56":"r50","63":"r50","64":"r50","65":"r50","66":"r50","67":"r50","68":"r50","69":"r50","77":"r50","78":"r50","79":"r50","80":"r50","83":"r50","84":"r50","85":"r50"},{"15":41,"24":86,"25":14,"26":16,"27":40,"28":42,"30":15,"31":17,"32":18,"33":19,"34":20,"35":21,"36":22,"37":24,"38":47,"39":46,"43":23,"44":27,"45":26,"46":31,"47":32,"48":33,"49":29,"50":30,"51":28,"60":"s43","62":"s44","68":"s25","70":"s48","71":"s39","72":"s36","73":"s37","74":"s38","75":"s34","76":"s35","77":"s45"},{"40":88,"77":"s78"},{"40":95,"77":"s78"},{"77":"r70"},{"52":"r38","54":"r38","55":"r38","57":"r38","58":"r38","59":"r38","60":"r38","61":"r38","62":"r38","68":"r38","70":"r38","71":"r38","72":"r38","73":"r38","74":"r38","75":"r38","76":"r38","77":"r38","79":"r38","81":"r38","82":"r38","86":"r38"},{"1":97,"2":3,"3":12,"6":11,"7":55,"8":10,"13":9,"14":7,"15":41,"18":8,"20":4,"21":5,"22":6,"23":96,"24":13,"25":14,"26":16,"27":40,"28":42,"30":15,"31":17,"32":18,"33":19,"34":20,"35":21,"36":22,"37":24,"38":47,"39":46,"43":23,"44":27,"45":26,"46":31,"47":32,"48":33,"49":29,"50":30,"51":28,"52":"s57","54":"s56","55":"s54","57":"s53","59":"s51","60":"s43","61":"s52","62":"s44","68":"s25","70":"s48","71":"s39","72":"s36","73":"s37","74":"s38","75":"s34","76":"s35","77":"s45","79":"s49","81":"s50","82":"r41"},{"15":99,"60":"s43"},{"15":41,"19":108,"24":109,"25":14,"26":16,"27":40,"28":42,"30":15,"31":17,"32":18,"33":19,"34":20,"35":21,"36":22,"37":24,"38":47,"39":46,"43":23,"44":27,"45":26,"46":31,"47":32,"48":33,"49":29,"50":30,"51":28,"60":"s43","62":"s44","68":"s25","70":"s48","71":"s39","72":"s36","73":"s37","74":"s38","75":"s34","76":"s35","77":"s45","79":"r36"},{"77":"s111"},{"9":117,"10":118,"15":119,"60":"s43"},{"52":"r17","54":"r17","55":"r17","57":"r17","58":"r17","59":"r17","60":"r17","61":"r17","62":"r17","68":"r17","70":"r17","71":"r17","72":"r17","73":"r17","74":"r17","75":"r17","76":"r17","77":"r17","79":"r17","81":"r17","82":"r17","86":"r17"},{"77":"s127"},{"15":131,"60":"s43"},{"52":"r3","54":"r3","55":"r3","57":"r3","59":"r3","60":"r3","61":"r3","62":"r3","68":"r3","70":"r3","71":"r3","72":"r3","73":"r3","74":"r3","75":"r3","76":"r3","77":"r3","79":"r3","81":"r3","82":"r3","86":"r3"},{"52":"r37","54":"r37","55":"r37","57":"r37","58":"r37","59":"r37","60":"r37","61":"r37","62":"r37","68":"r37","70":"r37","71":"r37","72":"r37","73":"r37","74":"r37","75":"r37","76":"r37","77":"r37","79":"r37","81":"r37","82":"r37","86":"r37"},{"15":41,"26":62,"27":40,"28":42,"31":61,"32":18,"33":19,"34":20,"35":21,"36":22,"37":24,"38":47,"39":46,"43":23,"44":27,"45":26,"46":31,"47":32,"48":33,"49":29,"50":30,"51":28,"60":"s43","62":"s44","68":"s25","70":"s48","71":"s39","72":"s36","73":"s37","74":"s38","75":"s34","76":"s35","77":"s45"},{"64":"r54","65":"s63","78":"r54","79":"r54","80":"r54","85":"r54"},{"64":"r80","65":"r80","66":"r80","67":"r80","68":"r80","69":"r80","77":"r71","78":"r80","79":"r80","80":"r80","85":"r80"},{"15":41,"26":62,"27":40,"28":42,"32":64,"33":19,"34":20,"35":21,"36":22,"37":24,"38":47,"39":46,"43":23,"44":27,"45":26,"46":31,"47":32,"48":33,"49":29,"50":30,"51":28,"60":"s43","62":"s44","68":"s25","70":"s48","71":"s39","72":"s36","73":"s37","74":"s38","75":"s34","76":"s35","77":"s45"},{"64":"r56","65":"r56","66":"s65","78":"r56","79":"r56","80":"r56","85":"r56"},{"15":41,"26":62,"27":40,"28":42,"33":66,"34":20,"35":21,"36":22,"37":24,"38":47,"39":46,"43":23,"44":27,"45":26,"46":31,"47":32,"48":33,"49":29,"50":30,"51":28,"60":"s43","62":"s44","68":"s25","70":"s48","71":"s39","72":"s36","73":"s37","74":"s38","75":"s34","76":"s35","77":"s45"},{"64":"r58","65":"r58","66":"r58","67":"s67","78":"r58","79":"r58","80":"r58","85":"r58"},{"15":41,"26":62,"27":40,"28":42,"34":68,"35":21,"36":22,"37":24,"38":47,"39":46,"43":23,"44":27,"45":26,"46":31,"47":32,"48":33,"49":29,"50":30,"51":28,"60":"s43","62":"s44","68":"s25","70":"s48","71":"s39","72":"s36","73":"s37","74":"s38","75":"s34","76":"s35","77":"s45"},{"64":"r60","65":"r60","66":"r60","67":"r60","68":"s69","78":"r60","79":"r60","80":"r60","85":"r60"},{"15":41,"26":62,"27":40,"28":42,"35":70,"36":22,"37":24,"38":47,"39":46,"43":23,"44":27,"45":26,"46":31,"47":32,"48":33,"49":29,"50":30,"51":28,"60":"s43","62":"s44","68":"s25","70":"s48","71":"s39","72":"s36","73":"s37","74":"s38","75":"s34","76":"s35","77":"s45"},{"64":"r61","65":"r61","66":"r61","67":"r61","68":"r61","69":"s71","78":"r61","79":"r61","80":"r61","85":"r61"},{"15":41,"26":62,"27":40,"28":42,"36":72,"37":24,"38":47,"39":46,"43":23,"44":27,"45":26,"46":31,"47":32,"48":33,"49":29,"50":30,"51":28,"60":"s43","62":"s44","68":"s25","70":"s48","71":"s39","72":"s36","73":"s37","74":"s38","75":"s34","76":"s35","77":"s45"},{"64":"r63","65":"r63","66":"r63","67":"r63","68":"r63","69":"r63","78":"r63","79":"r63","80":"r63","85":"r63"},{"64":"r67","65":"r67","66":"r67","67":"r67","68":"r67","69":"r67","78":"r67","79":"r67","80":"r67","85":"r67"},{"40":75,"77":"s78","83":"s76","84":"s77"},{"64":"r82","65":"r82","66":"r82","67":"r82","68":"r82","69":"r82","78":"r82","79":"r82","80":"r82","85":"r82"},{"15":79,"60":"s43"},{"15":41,"24":80,"25":14,"26":16,"27":40,"28":42,"30":15,"31":17,"32":18,"33":19,"34":20,"35":21,"36":22,"37":24,"38":47,"39":46,"43":23,"44":27,"45":26,"46":31,"47":32,"48":33,"49":29,"50":30,"51":28,"60":"s43","62":"s44","68":"s25","70":"s48","71":"s39","72":"s36","73":"s37","74":"s38","75":"s34","76":"s35","77":"s45"},{"15":41,"25":91,"26":16,"27":40,"28":42,"30":15,"31":17,"32":18,"33":19,"34":20,"35":21,"36":22,"37":24,"38":47,"39":46,"41":89,"42":90,"43":23,"44":27,"45":26,"46":31,"47":32,"48":33,"49":29,"50":30,"51":28,"60":"s43","62":"s44","68":"s25","70":"s48","71":"s39","72":"s36","73":"s37","74":"s38","75":"s34","76":"s35","77":"s45","78":"r75"},{"56":"r48","63":"r48","64":"r48","65":"r48","66":"r48","67":"r48","68":"r48","69":"r48","77":"r48","78":"r48","79":"r48","80":"r48","83":"r48","84":"r48","85":"r48"},{"85":"s81"},{"56":"r49","63":"r49","64":"r49","65":"r49","66":"r49","67":"r49","68":"r49","69":"r49","77":"r49","78":"r49","79":"r49","80":"r49","83":"r49","84":"r49","85":"r49"},{"15":41,"25":85,"26":16,"27":40,"28":42,"30":15,"31":17,"32":18,"33":19,"34":20,"35":21,"36":22,"37":24,"38":47,"39":46,"43":23,"44":27,"45":26,"46":31,"47":32,"48":33,"49":29,"50":30,"51":28,"60":"s43","62":"s44","68":"s25","70":"s48","71":"s39","72":"s36","73":"s37","74":"s38","75":"s34","76":"s35","77":"s45"},{"60":"r51","62":"r51","68":"r51","70":"r51","71":"r51","72":"r51","73":"r51","74":"r51","75":"r51","76":"r51","77":"r51"},{"60":"r52","62":"r52","68":"r52","70":"r52","71":"r52","72":"r52","73":"r52","74":"r52","75":"r52","76":"r52","77":"r52"},{"78":"r44","79":"r44","80":"r44","85":"r44"},{"78":"s87"},{"64":"r93","65":"r93","66":"r93","67":"r93","68":"r93","69":"r93","78":"r93","79":"r93","80":"r93","85":"r93"},{"64":"r68","65":"r68","66":"r68","67":"r68","68":"r68","69":"r68","77":"r68","78":"r68","79":"r68","80":"r68","85":"r68"},{"78":"s92"},{"78":"r74","80":"s93"},{"78":"r76","80":"r76"},{"64":"r73","65":"r73","66":"r73","67":"r73","68":"r73","69":"r73","77":"r73","78":"r73","79":"r73","80":"r73","85":"r73"},{"15":41,"25":94,"26":16,"27":40,"28":42,"30":15,"31":17,"32":18,"33":19,"34":20,"35":21,"36":22,"37":24,"38":47,"39":46,"43":23,"44":27,"45":26,"46":31,"47":32,"48":33,"49":29,"50":30,"51":28,"60":"s43","62":"s44","68":"s25","70":"s48","71":"s39","72":"s36","73":"s37","74":"s38","75":"s34","76":"s35","77":"s45"},{"78":"r77","80":"r77"},{"64":"r69","65":"r69","66":"r69","67":"r69","68":"r69","69":"r69","77":"r69","78":"r69","79":"r69","80":"r69","85":"r69"},{"82":"s98"},{"2":58,"3":12,"6":11,"7":55,"8":10,"13":9,"14":7,"15":41,"18":8,"20":4,"21":5,"22":6,"24":13,"25":14,"26":16,"27":40,"28":42,"30":15,"31":17,"32":18,"33":19,"34":20,"35":21,"36":22,"37":24,"38":47,"39":46,"43":23,"44":27,"45":26,"46":31,"47":32,"48":33,"49":29,"50":30,"51":28,"52":"s57","54":"s56","55":"s54","57":"s53","59":"s51","60":"s43","61":"s52","62":"s44","68":"s25","70":"s48","71":"s39","72":"s36","73":"s37","74":"s38","75":"s34","76":"s35","77":"s45","79":"s49","81":"s50","82":"r40"},{"52":"r39","54":"r39","55":"r39","57":"r39","58":"r39","59":"r39","60":"r39","61":"r39","62":"r39","68":"r39","70":"r39","71":"r39","72":"r39","73":"r39","74":"r39","75":"r39","76":"r39","77":"r39","79":"r39","81":"r39","82":"r39","86":"r39"},{"77":"s100"},{"15":103,"16":101,"17":102,"60":"s43","78":"r31"},{"78":"s104"},{"78":"r30","80":"s106"},{"78":"r32","80":"r32"},{"22":105,"81":"s50"},{"52":"r28","54":"r28","55":"r28","57":"r28","58":"r28","59":"r28","60":"r28","61":"r28","62":"r28","68":"r28","70":"r28","71":"r28","72":"r28","73":"r28","74":"r28","75":"r28","76":"r28","77":"r28","79":"r28","81":"r28","82":"r28","86":"r28"},{"15":107,"60":"s43"},{"78":"r33","80":"r33"},{"79":"s110"},{"79":"r35"},{"52":"r34","54":"r34","55":"r34","57":"r34","58":"r34","59":"r34","60":"r34","61":"r34","62":"r34","68":"r34","70":"r34","71":"r34","72":"r34","73":"r34","74":"r34","75":"r34","76":"r34","77":"r34","79":"r34","81":"r34","82":"r34","86":"r34"},{"15":41,"24":112,"25":14,"26":16,"27":40,"28":42,"30":15,"31":17,"32":18,"33":19,"34":20,"35":21,"36":22,"37":24,"38":47,"39":46,"43":23,"44":27,"45":26,"46":31,"47":32,"48":33,"49":29,"50":30,"51":28,"60":"s43","62":"s44","68":"s25","70":"s48","71":"s39","72":"s36","73":"s37","74":"s38","75":"s34","76":"s35","77":"s45"},{"78":"s113"},{"2":114,"3":12,"6":11,"7":55,"8":10,"13":9,"14":7,"15":41,"18":8,"20":4,"21":5,"22":6,"24":13,"25":14,"26":16,"27":40,"28":42,"30":15,"31":17,"32":18,"33":19,"34":20,"35":21,"36":22,"37":24,"38":47,"39":46,"43":23,"44":27,"45":26,"46":31,"47":32,"48":33,"49":29,"50":30,"51":28,"52":"s57","54":"s56","55":"s54","57":"s53","59":"s51","60":"s43","61":"s52","62":"s44","68":"s25","70":"s48","71":"s39","72":"s36","73":"s37","74":"s38","75":"s34","76":"s35","77":"s45","79":"s49","81":"s50"},{"52":"r26","54":"r26","55":"r26","57":"r26","58":"s115","59":"r26","60":"r26","61":"r26","62":"r26","68":"r26","70":"r26","71":"r26","72":"r26","73":"r26","74":"r26","75":"r26","76":"r26","77":"r26","79":"r26","81":"r26","82":"r26","86":"r26"},{"2":116,"3":12,"6":11,"7":55,"8":10,"13":9,"14":7,"15":41,"18":8,"20":4,"21":5,"22":6,"24":13,"25":14,"26":16,"27":40,"28":42,"30":15,"31":17,"32":18,"33":19,"34":20,"35":21,"36":22,"37":24,"38":47,"39":46,"43":23,"44":27,"45":26,"46":31,"47":32,"48":33,"49":29,"50":30,"51":28,"52":"s57","54":"s56","55":"s54","57":"s53","59":"s51","60":"s43","61":"s52","62":"s44","68":"s25","70":"s48","71":"s39","72":"s36","73":"s37","74":"s38","75":"s34","76":"s35","77":"s45","79":"s49","81":"s50"},{"52":"r27","54":"r27","55":"r27","57":"r27","58":"r27","59":"r27","60":"r27","61":"r27","62":"r27","68":"r27","70":"r27","71":"r27","72":"r27","73":"r27","74":"r27","75":"r27","76":"r27","77":"r27","79":"r27","81":"r27","82":"r27","86":"r27"},{"79":"s120","80":"s121"},{"79":"r20","80":"r20"},{"11":123,"12":124,"56":"s125","79":"r24","80":"r24"},{"52":"r19","54":"r19","55":"r19","57":"r19","58":"r19","59":"r19","60":"r19","61":"r19","62":"r19","68":"r19","70":"r19","71":"r19","72":"r19","73":"r19","74":"r19","75":"r19","76":"r19","77":"r19","79":"r19","81":"r19","82":"r19","86":"r19"},{"10":122,"15":119,"60":"s43"},{"79":"r21","80":"r21"},{"79":"r22","80":"r22"},{"79":"r23","80":"r23"},{"15":41,"25":126,"26":16,"27":40,"28":42,"30":15,"31":17,"32":18,"33":19,"34":20,"35":21,"36":22,"37":24,"38":47,"39":46,"43":23,"44":27,"45":26,"46":31,"47":32,"48":33,"49":29,"50":30,"51":28,"60":"s43","62":"s44","68":"s25","70":"s48","71":"s39","72":"s36","73":"s37","74":"s38","75":"s34","76":"s35","77":"s45"},{"79":"r25","80":"r25"},{"15":41,"24":128,"25":14,"26":16,"27":40,"28":42,"30":15,"31":17,"32":18,"33":19,"34":20,"35":21,"36":22,"37":24,"38":47,"39":46,"43":23,"44":27,"45":26,"46":31,"47":32,"48":33,"49":29,"50":30,"51":28,"60":"s43","62":"s44","68":"s25","70":"s48","71":"s39","72":"s36","73":"s37","74":"s38","75":"s34","76":"s35","77":"s45"},{"78":"s129"},{"2":130,"3":12,"6":11,"7":55,"8":10,"13":9,"14":7,"15":41,"18":8,"20":4,"21":5,"22":6,"24":13,"25":14,"26":16,"27":40,"28":42,"30":15,"31":17,"32":18,"33":19,"34":20,"35":21,"36":22,"37":24,"38":47,"39":46,"43":23,"44":27,"45":26,"46":31,"47":32,"48":33,"49":29,"50":30,"51":28,"52":"s57","54":"s56","55":"s54","57":"s53","59":"s51","60":"s43","61":"s52","62":"s44","68":"s25","70":"s48","71":"s39","72":"s36","73":"s37","74":"s38","75":"s34","76":"s35","77":"s45","79":"s49","81":"s50"},{"52":"r18","54":"r18","55":"r18","57":"r18","58":"r18","59":"r18","60":"r18","61":"r18","62":"r18","68":"r18","70":"r18","71":"r18","72":"r18","73":"r18","74":"r18","75":"r18","76":"r18","77":"r18","79":"r18","81":"r18","82":"r18","86":"r18"},{"4":132,"5":133,"52":"r15","53":"s134","54":"r15","55":"r15","57":"r15","59":"r15","60":"r15","61":"r15","62":"r15","68":"r15","70":"r15","71":"r15","72":"r15","73":"r15","74":"r15","75":"r15","76":"r15","77":"r15","79":"r15","81":"r15"},{"2":135,"3":12,"6":11,"7":55,"8":10,"13":9,"14":7,"15":41,"18":8,"20":4,"21":5,"22":6,"24":13,"25":14,"26":16,"27":40,"28":42,"30":15,"31":17,"32":18,"33":19,"34":20,"35":21,"36":22,"37":24,"38":47,"39":46,"43":23,"44":27,"45":26,"46":31,"47":32,"48":33,"49":29,"50":30,"51":28,"52":"s57","54":"s56","55":"s54","57":"s53","59":"s51","60":"s43","61":"s52","62":"s44","68":"s25","70":"s48","71":"s39","72":"s36","73":"s37","74":"s38","75":"s34","76":"s35","77":"s45","79":"s49","81":"s50"},{"52":"r14","54":"r14","55":"r14","57":"r14","59":"r14","60":"r14","61":"r14","62":"r14","68":"r14","70":"r14","71":"r14","72":"r14","73":"r14","74":"r14","75":"r14","76":"r14","77":"r14","79":"r14","81":"r14"},{"15":136,"60":"s43"},{"52":"r13","54":"r13","55":"r13","57":"r13","58":"r13","59":"r13","60":"r13","61":"r13","62":"r13","68":"r13","70":"r13","71":"r13","72":"r13","73":"r13","74":"r13","75":"r13","76":"r13","77":"r13","79":"r13","81":"r13","82":"r13","86":"r13"},{"52":"r16","54":"r16","55":"r16","57":"r16","59":"r16","60":"r16","61":"r16","62":"r16","68":"r16","70":"r16","71":"r16","72":"r16","73":"r16","74":"r16","75":"r16","76":"r16","77":"r16","79":"r16","81":"r16"}];

/**
 * Parsing stack.
 */
const stack = [];

/**
 * Tokenizer instance.
 */
let tokenizer;
/**
 * Generic tokenizer used by the parser in the Syntax tool.
 *
 * https://www.npmjs.com/package/syntax-cli
 *
 * See `--custom-tokinzer` to skip this generation, and use a custom one.
 */

const lexRules = [[/^\(/, function() { return "'('"; }],
[/^\)/, function() { return "')'"; }],
[/^;/, function() { return "';'"; }],
[/^,/, function() { return "','"; }],
[/^\{/, function() { return "'{'"; }],
[/^\}/, function() { return "'}'"; }],
[/^\./, function() { return "'.'"; }],
[/^\[/, function() { return "'['"; }],
[/^\]/, function() { return "']'"; }],
[/^\/\/.*/, function() { /* skip comments */ }],
[/^\/\*(.|\s)*\*\//, function() { /* skip comments */ }],
[/^\s+/, function() { /* skip whitespace */ }],
[/^"[^\"]*"/, function() { return 'STRING' }],
[/^\bdef\b/, function() { return 'DEF' }],
[/^\breturn\b/, function() { return 'RETURN' }],
[/^\bif\b/, function() { return 'IF' }],
[/^\belse\b/, function() { return 'ELSE' }],
[/^\blet\b/, function() { return 'LET' }],
[/^\bwhile\b/, function() { return 'WHILE' }],
[/^\bdo\b/, function() { return 'DO' }],
[/^\bfor\b/, function() { return 'FOR' }],
[/^\bclass\b/, function() { return 'CLASS' }],
[/^\bextends\b/, function() { return 'EXTENDS' }],
[/^\bsuper\b/, function() { return 'SUPER' }],
[/^\bnew\b/, function() { return 'NEW' }],
[/^\bthis\b/, function() { return 'THIS' }],
[/^\btrue\b/, function() { return 'TRUE' }],
[/^\bfalse\b/, function() { return 'FALSE' }],
[/^\bnull\b/, function() { return 'NULL' }],
[/^\d+/, function() { return 'NUMBER' }],
[/^\w+/, function() { return 'IDENTIFIER' }],
[/^\|\|/, function() { return 'LOGICAL_OR' }],
[/^&&/, function() { return 'LOGICAL_AND' }],
[/^[\=!]=/, function() { return 'EQUALITY_OPERATOR' }],
[/^[><]=?/, function() { return 'RELATIONAL_OPERATOR' }],
[/^=/, function() { return 'SIMPLE_ASSIGN' }],
[/^[*/\+\-]=/, function() { return 'COMPLEX_ASSIGN' }],
[/^[+\-]/, function() { return 'ADDITIVE_OPERATOR' }],
[/^[*/]/, function() { return 'MULTIPLICATIVE_OPERATOR' }]];
const lexRulesByConditions = {"INITIAL":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38]};

const EOF_TOKEN = {
  type: EOF,
  value: '',
};

tokenizer = {
  initString(string) {
    this._string = string;
    this._cursor = 0;

    this._states = ['INITIAL'];
    this._tokensQueue = [];

    this._currentLine = 1;
    this._currentColumn = 0;
    this._currentLineBeginOffset = 0;

    /**
     * Matched token location data.
     */
    this._tokenStartOffset = 0;
    this._tokenEndOffset = 0;
    this._tokenStartLine = 1;
    this._tokenEndLine = 1;
    this._tokenStartColumn = 0;
    this._tokenEndColumn = 0;

    return this;
  },

  /**
   * Returns tokenizer states.
   */
  getStates() {
    return this._states;
  },

  getCurrentState() {
    return this._states[this._states.length - 1];
  },

  pushState(state) {
    this._states.push(state);
  },

  begin(state) {
    this.pushState(state);
  },

  popState() {
    if (this._states.length > 1) {
      return this._states.pop();
    }
    return this._states[0];
  },

  getNextToken() {
    // Something was queued, return it.
    if (this._tokensQueue.length > 0) {
      return this.onToken(this._toToken(this._tokensQueue.shift()));
    }

    if (!this.hasMoreTokens()) {
      return this.onToken(EOF_TOKEN);
    }

    let string = this._string.slice(this._cursor);
    let lexRulesForState = lexRulesByConditions[this.getCurrentState()];

    for (let i = 0; i < lexRulesForState.length; i++) {
      let lexRuleIndex = lexRulesForState[i];
      let lexRule = lexRules[lexRuleIndex];

      let matched = this._match(string, lexRule[0]);

      // Manual handling of EOF token (the end of string). Return it
      // as `EOF` symbol.
      if (string === '' && matched === '') {
        this._cursor++;
      }

      if (matched !== null) {
        yytext = matched;
        yyleng = yytext.length;
        let token = lexRule[1].call(this);

        if (!token) {
          return this.getNextToken();
        }

        // If multiple tokens are returned, save them to return
        // on next `getNextToken` call.

        if (Array.isArray(token)) {
          const tokensToQueue = token.slice(1);
          token = token[0];
          if (tokensToQueue.length > 0) {
            this._tokensQueue.unshift(...tokensToQueue);
          }
        }

        return this.onToken(this._toToken(token, yytext));
      }
    }

    if (this.isEOF()) {
      this._cursor++;
      return EOF_TOKEN;
    }

    this.throwUnexpectedToken(
      string[0],
      this._currentLine,
      this._currentColumn
    );
  },

  /**
   * Throws default "Unexpected token" exception, showing the actual
   * line from the source, pointing with the ^ marker to the bad token.
   * In addition, shows `line:column` location.
   */
  throwUnexpectedToken(symbol, line, column) {
    const lineSource = this._string.split('\n')[line - 1];
    let lineData = '';

    if (lineSource) {
      const pad = ' '.repeat(column);
      lineData = '\n\n' + lineSource + '\n' + pad + '^\n';
    }

    throw new SyntaxError(
      `${lineData}Unexpected token: "${symbol}" ` +
      `at ${line}:${column}.`
    );
  },

  getCursor() {
    return this._cursor;
  },

  getCurrentLine() {
    return this._currentLine;
  },

  getCurrentColumn() {
    return this._currentColumn;
  },

  _captureLocation(matched) {
    const nlRe = /\n/g;

    // Absolute offsets.
    this._tokenStartOffset = this._cursor;

    // Line-based locations, start.
    this._tokenStartLine = this._currentLine;
    this._tokenStartColumn =
      this._tokenStartOffset - this._currentLineBeginOffset;

    // Extract `\n` in the matched token.
    let nlMatch;
    while ((nlMatch = nlRe.exec(matched)) !== null) {
      this._currentLine++;
      this._currentLineBeginOffset = this._tokenStartOffset + nlMatch.index + 1;
    }

    this._tokenEndOffset = this._cursor + matched.length;

    // Line-based locations, end.
    this._tokenEndLine = this._currentLine;
    this._tokenEndColumn = this._currentColumn =
      (this._tokenEndOffset - this._currentLineBeginOffset);
  },

  _toToken(tokenType, yytext = '') {
    return {
      // Basic data.
      type: tokenType,
      value: yytext,

      // Location data.
      startOffset: this._tokenStartOffset,
      endOffset: this._tokenEndOffset,
      startLine: this._tokenStartLine,
      endLine: this._tokenEndLine,
      startColumn: this._tokenStartColumn,
      endColumn: this._tokenEndColumn,
    };
  },

  isEOF() {
    return this._cursor === this._string.length;
  },

  hasMoreTokens() {
    return this._cursor <= this._string.length;
  },

  _match(string, regexp) {
    let matched = string.match(regexp);
    if (matched) {
      // Handle `\n` in the matched token to track line numbers.
      this._captureLocation(matched[0]);
      this._cursor += matched[0].length;
      return matched[0];
    }
    return null;
  },

  /**
   * Allows analyzing, and transforming token. Default implementation
   * just passes the token through.
   */
  onToken(token) {
    return token;
  },
};

/**
 * Expose tokenizer so it can be accessed in semantic actions.
 */
yy.lexer = tokenizer;
yy.tokenizer = tokenizer;

/**
 * Global parsing options. Some options can be shadowed per
 * each `parse` call, if the optations are passed.
 *
 * Initalized to the `captureLocations` which is passed
 * from the generator. Other options can be added at runtime.
 */
yy.options = {
  captureLocations: false,
};

/**
 * Parsing module.
 */
const yyparse = {
  /**
   * Sets global parsing options.
   */
  setOptions(options) {
    yy.options = options;
    return this;
  },

  /**
   * Returns parsing options.
   */
  getOptions() {
    return yy.options;
  },

  /**
   * Parses a string.
   */
  parse(string, parseOptions) {
    if (!tokenizer) {
      throw new Error(`Tokenizer instance wasn't specified.`);
    }

    tokenizer.initString(string);

    /**
     * If parse options are passed, override global parse options for
     * this call, and later restore global options.
     */
    let globalOptions = yy.options;
    if (parseOptions) {
      yy.options = Object.assign({}, yy.options, parseOptions);
    }

    /**
     * Allow callers to do setup work based on the
     * parsing string, and passed options.
     */
    yyparse.onParseBegin(string, tokenizer, yy.options);

    stack.length = 0;
    stack.push(0);

    let token = tokenizer.getNextToken();
    let shiftedToken = null;

    do {
      if (!token) {
        // Restore options.
        yy.options = globalOptions;
        unexpectedEndOfInput();
      }

      let state = stack[stack.length - 1];
      let column = tokens[token.type];

      if (!table[state].hasOwnProperty(column)) {
        yy.options = globalOptions;
        unexpectedToken(token);
      }

      let entry = table[state][column];

      // Shift action.
      if (entry[0] === 's') {
        let loc = null;

        if (yy.options.captureLocations) {
          loc = {
            startOffset: token.startOffset,
            endOffset: token.endOffset,
            startLine: token.startLine,
            endLine: token.endLine,
            startColumn: token.startColumn,
            endColumn: token.endColumn,
          };
        }

        shiftedToken = this.onShift(token);

        stack.push(
          {symbol: tokens[shiftedToken.type], semanticValue: shiftedToken.value, loc},
          Number(entry.slice(1))
        );

        token = tokenizer.getNextToken();
      }

      // Reduce action.
      else if (entry[0] === 'r') {
        let productionNumber = entry.slice(1);
        let production = productions[productionNumber];
        let hasSemanticAction = typeof production[2] === 'function';
        let semanticValueArgs = hasSemanticAction ? [] : null;

        const locationArgs = (
          hasSemanticAction && yy.options.captureLocations
            ? []
            : null
        );

        if (production[1] !== 0) {
          let rhsLength = production[1];
          while (rhsLength-- > 0) {
            stack.pop();
            let stackEntry = stack.pop();

            if (hasSemanticAction) {
              semanticValueArgs.unshift(stackEntry.semanticValue);

              if (locationArgs) {
                locationArgs.unshift(stackEntry.loc);
              }
            }
          }
        }

        const reduceStackEntry = {symbol: production[0]};

        if (hasSemanticAction) {
          yytext = shiftedToken ? shiftedToken.value : null;
          yyleng = shiftedToken ? shiftedToken.value.length : null;

          const semanticActionArgs = (
            locationArgs !== null
              ? semanticValueArgs.concat(locationArgs)
              : semanticValueArgs
          );

          production[2](...semanticActionArgs);

          reduceStackEntry.semanticValue = __;

          if (locationArgs) {
            reduceStackEntry.loc = __loc;
          }
        }

        const nextState = stack[stack.length - 1];
        const symbolToReduceWith = production[0];

        stack.push(
          reduceStackEntry,
          table[nextState][symbolToReduceWith]
        );
      }

      // Accept.
      else if (entry === 'acc') {
        stack.pop();
        let parsed = stack.pop();

        if (stack.length !== 1 ||
            stack[0] !== 0 ||
            tokenizer.hasMoreTokens()) {
          // Restore options.
          yy.options = globalOptions;
          unexpectedToken(token);
        }

        if (parsed.hasOwnProperty('semanticValue')) {
          yy.options = globalOptions;
          yyparse.onParseEnd(parsed.semanticValue);
          return parsed.semanticValue;
        }

        yyparse.onParseEnd();

        // Restore options.
        yy.options = globalOptions;
        return true;
      }

    } while (tokenizer.hasMoreTokens() || stack.length > 1);
  },

  setTokenizer(customTokenizer) {
    tokenizer = customTokenizer;
    return yyparse;
  },

  getTokenizer() {
    return tokenizer;
  },

  onParseBegin(string, tokenizer, options) {},
  onParseEnd(parsed) {},

  /**
   * Allows analyzing, and transforming shifted token. Default implementation
   * just passes the token through.
   */
  onShift(token) {
    return token;
  },
};

// Code included "as is"

function BinaryExpression(left, operator, right) {
  return {
    type: 'BinaryExpression',
    operator,
    left,
    right,
  };
}

function LogicalExpression(left, operator, right) {
  return {
    type: 'LogicalExpression',
    operator,
    left,
    right,
  };
}

function UnaryExpression(operator, argument) {
  return {
    type: 'UnaryExpression',
    operator,
    argument,
  };
}

function MemberExpression(object, property) {
  return {
    type: 'MemberExpression',
    object,
    property,
  };
}

function CallExpression(callee, args) {
  return {
    type: 'CallExpression',
    callee,
    arguments: args,
  }
}

function Literal(namePrefix, value) {
  return {
    type: `${namePrefix}Literal`,
    value,
  };
}

function IfStatement(test, consequent, alternate) {
  return {
    type: 'IfStatement',
    test,
    consequent,
    alternate,
  };
}

function unexpectedToken(token) {
  if (token.type === EOF) {
    unexpectedEndOfInput();
  }

  tokenizer.throwUnexpectedToken(
    token.value,
    token.startLine,
    token.startColumn
  );
}

function unexpectedEndOfInput() {
  parseError(`Unexpected end of input.`);
}

function parseError(message) {
  throw new SyntaxError(message);
}

module.exports = yyparse;
